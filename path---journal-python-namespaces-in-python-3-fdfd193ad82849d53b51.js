webpackJsonp([0xe146872e65b6],{350:function(e,n){e.exports={data:{site:{siteMetadata:{title:"Ulises Avila",profesion:" - Web Developer"}},markdownRemark:{html:'<h2 id="introduction"><a href="#introduction" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Introduction</h2>\n<p>One day at work you develop an important module that is going to be used in the next weeks. In your first task using your module you notice something, tests are no passing and you need to fix them before working in other tasks. As your module is already working you check your implementation, from parameters to names, everything seems OK, then a colleague comes and tells you "You have a conflict of names between you module and another module", because yet no one is using you module you go an change the conflicting names, the logical errors are fixed and you can go to the next task.</p>\n<p>What you have witnessed is the result of <em>namespace</em> ruling, it is important to know this concept because it revolves around having an scope between all the names present in a project, so in this article I am discussing about it.</p>\n<div id="toc">\n<div class="center">Contents</div>\n<!-- TOC -->\n<ul>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#prerequisites">Prerequisites</a></li>\n<li><a href="#names-in-python">Names in Python</a></li>\n<li><a href="#defining-namespaces">Defining namespaces</a></li>\n<li><a href="#conflicts-at-naming">Conflicts at naming</a></li>\n<li><a href="#scopes">Scopes</a></li>\n<li><a href="#conclusion">Conclusion</a></li>\n</ul>\n<!-- /TOC -->\n</div>\n<h2 id="prerequisites"><a href="#prerequisites" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Prerequisites</h2>\n<p>To successfully follow this article it is a must to have these requisites in the machine you are working with:</p>\n<ul>\n<li>Python environment installed.</li>\n<li>Text editor of preference.</li>\n</ul>\n<h2 id="names-in-python"><a href="#names-in-python" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Names in Python</h2>\n<p>Everything in Python is an object and these objects are stored in RAM at run time, every object posses an <code class="language-text">id</code> that we can use to retrieve our object, but in practice using the <code class="language-text">id</code> to work its not recommended (and you should not do it) because we do not know what we are using until it is called, to resolve this we need  mechanism to identify our object, this is the fundamental of why names exists in programming languages in general.</p>\n<p>So a <em>name</em> in Python is the identifier used to refer to an object, in other words a name is what we colloquially call <em>name of the variable</em> or just <em>variable</em>.</p>\n<p>To understand how names work lets do an experiment, create a file called <code class="language-text">name.py</code> in your folder of choice and paste the following code:</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token number">9</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Id of 9: "</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Id of x: "</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\ny <span class="token operator">=</span> <span class="token number">9</span>\nz <span class="token operator">=</span> x\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Id of y: "</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Id of z: "</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<p>The code is about reporting the <code class="language-text">id</code> of some objects at different points in execution runtime. Executing the script leads to the following output:</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">Id of 9:  140611653450368\nId of x:  140611653450368\nId of y:  140611653450368\nId of z:  140611653450368</code></pre>\n      </div>\n<p><strong>Note:</strong> The <code class="language-text">id</code> will vary each time you execute the file, so it is highly possible that your output will not be the same as this post.</p>\n<p>Note that the reported <code class="language-text">id</code> is the same in all variables, this phenomenon implies the following information:</p>\n<ul>\n<li>The <code class="language-text">id</code> of the object in raw state is the same as the <code class="language-text">id</code> of the variable that points to it. Which is the case for first and second result.</li>\n<li>After executing more instructions, passing 9 to other variable lets us see that it have the same <code class="language-text">id</code> that we saw before. This is the case for third result.</li>\n<li>And the <code class="language-text">id</code> is kept even after passing it to another variable, as seen in the last report.</li>\n</ul>\n<p>With this information it is concluded that we are dealing with the same object all the time, and we are passing its <code class="language-text">id</code> or reference as known in languages like C. So a variable or name is the identifier that points to an object instead of storing it. This conclusion will help later to ground the concept of namespaces.</p>\n<h2 id="defining-namespaces"><a href="#defining-namespaces" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Defining namespaces</h2>\n<p>Now that we know what a name is, namespaces can be defined. At first one can think that as the term suggests, the namespaces is a collection of names, and it is correct, but Python expands this definition to "the mapping of every name with its correspondent object". So in other words, the namespace is the mechanism that points a name and only one object, whether is an object, a class or a function in a manner that we can use that object with invoking its correspondent name.</p>\n<p>There are three types of namespaces:</p>\n<ul>\n<li><strong>Built-in namespace</strong>: The starting namespace of the program, some examples of names hold are: <code class="language-text">print</code>, <code class="language-text">input</code>, <code class="language-text">str</code>, <code class="language-text">int</code>, <code class="language-text">float</code>, <code class="language-text">list</code> and <code class="language-text">dir</code>.</li>\n<li><strong>Global namespace of the module</strong>: This namespace lives only in each module or in other words this maps all the names of a Python file.</li>\n<li><strong>Local namespace</strong>: This lives inside of a function that again this function lives inside a module.</li>\n</ul>\n<p>Back in the definition a concept was mentioned, "mapping", that means that the namespace is actually a dictionary object, unfortunately, this dictionary is abstracted and cannot be accessed in a formal way, there is another tool to list all the names of an object, this tool is the <code class="language-text">dir</code> function built-in in Python, with this one can see directly the namespace of the project in different moments.</p>\n<p>To understand some characteristics of namespaces we will execute some code that will use <code class="language-text">dir</code> function at different moments, so in the same directory we have been working, we will create two file, the first file has this content:</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code class="language-python"><span class="token keyword">import</span> external\n\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">\'Global namespace \'</span><span class="token punctuation">,</span> <span class="token builtin">dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token keyword">def</span> <span class="token function">function1</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span> bar<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">return</span> <span class="token string">"function1"</span>\n\n<span class="token keyword">def</span> <span class="token function">_function2</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span> bar<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">return</span> <span class="token string">"function2"</span>\n\n<span class="token keyword">def</span> <span class="token function">__function3</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span> bar<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">return</span> <span class="token string">"function3"</span>\n\nexternal<span class="token punctuation">.</span>sumn<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span>\n\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">\'Global namespace updated \'</span><span class="token punctuation">,</span> <span class="token builtin">dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<p>For the second file we are having this content:</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code class="language-python"><span class="token keyword">import</span> math\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">\'Module namespace \'</span><span class="token punctuation">,</span> <span class="token builtin">dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token keyword">def</span> <span class="token function">sumn</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>\n  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">\'Local namespace \'</span><span class="token punctuation">,</span> <span class="token builtin">dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> a <span class="token operator">+</span> b</code></pre>\n      </div>\n<p>After we have pointed the content of both files we are executing them to show how namespaces work, this time you should have the exact output as follows:</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">Module namespace  [&#39;__builtins__&#39;, &#39;__cached__&#39;, &#39;__doc__&#39;, &#39;__file__&#39;, &#39;__loader__&#39;, &#39;__name__&#39;, &#39;__package__&#39;, &#39;__spec__&#39;, &#39;math&#39;]\nGlobal namespace  [&#39;__annotations__&#39;, &#39;__builtins__&#39;, &#39;__cached__&#39;, &#39;__doc__&#39;, &#39;__file__&#39;, &#39;__loader__&#39;, &#39;__name__&#39;, &#39;__package__&#39;, &#39;__spec__&#39;, &#39;external&#39;]\nLocal namespace  [&#39;a&#39;, &#39;b&#39;]\nGlobal namespace updated  [&#39;__annotations__&#39;, &#39;__builtins__&#39;, &#39;__cached__&#39;, &#39;__doc__&#39;, &#39;__file__&#39;, &#39;__function3&#39;, &#39;__loader__&#39;, &#39;__name__&#39;, &#39;__package__&#39;, &#39;__spec__&#39;, &#39;_function2&#39;, &#39;external&#39;, &#39;function1&#39;]</code></pre>\n      </div>\n<p>Before directly analyzing namespaces there is something that should catch your attention. The first namespace to be reported is from the module, and this is logical, after all the next step from importing should be reading that module so we are able to use its content later.</p>\n<p>Now lets review the contents of the output:</p>\n<ul>\n<li>The first to appear is the namespace of the module, we can see some internal attributes and at the end of the list we got the attribute <code class="language-text">math</code>, if we go back we can remember that <code class="language-text">math</code> module was imported, but it is strange that the function <code class="language-text">sumn</code> is not appearing in the list.</li>\n<li>The second one is the global module and it is almost identical to the module one, here we got two more attributes <code class="language-text">__annotations__</code> and <code class="language-text">external</code> which is the name of our module.</li>\n<li>In the third namespace we have something interesting, we are only getting two attributes, as we said earlier, local namespaces only record the names of an specific function, and if you go back to the file you will note it we only have two attributes.</li>\n<li>And last but not least we are reporting again the global namespace and there is extra information now, we see the names of the functions and the module imported in the main file.</li>\n</ul>\n<p>Now putting together this information we get these conclusions of the workings of namespaces:</p>\n<ul>\n<li><strong>Namespaces are isolated</strong>: We clearly see it in all reports, the first one tell us that we are importing <code class="language-text">math</code>, but it is not telling us the actual content of <code class="language-text">math</code>, the second one is telling us that <code class="language-text">external</code> is imported, but we are not able to see the <code class="language-text">sumn</code> name, the third one cannot see the <code class="language-text">math</code> import even that a function exists in the module, and at least the global namespace again is telling us the names we have, but not the content of them.</li>\n<li><strong>Namespaces are created and modified when needed</strong>: Lets compare the second and fourth report, each one is reporting a global namespace, actually is the same namespace, but both have different content, the difference remains in the amount of executed content, what we are seeing is that the name is added to the namespace until it is defined.</li>\n</ul>\n<p>Now that we fully understand what and how a namespace works lets talk about some little but important topics to have in mind when naming objects.</p>\n<h2 id="conflicts-at-naming"><a href="#conflicts-at-naming" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Conflicts at naming</h2>\n<p>The dynamic nature of naming in Python lets us change the name of an object in the fly, it means that at different times in execution a given name can point to different objects to, this characteristic can lead to ambiguous objects if not given enough care. To visualize this lets point to two modules in the standard library.</p>\n<p>Now we are going to use the Python Shell, so execute the <code class="language-text">python</code> command in a terminal window.</p>\n<p>The Python Shell will enter and show this:</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">Python 3.6.2 (default, Jul 20 2017, 03:52:27)\n[GCC 7.1.1 20170630] on linux\nType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</code></pre>\n      </div>\n<p>We will then <code class="language-text">import math</code> and also show the content of <code class="language-text">math</code> with <code class="language-text">dir</code>:</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">import math\ndir(math)</code></pre>\n      </div>\n<p>Then the contents of <code class="language-text">math</code> are reported:</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">[&#39;__doc__&#39;, &#39;__file__&#39;, &#39;__loader__&#39;, &#39;__name__&#39;, &#39;__package__&#39;, &#39;__spec__&#39;, &#39;acos&#39;, &#39;acosh&#39;, &#39;asin&#39;, &#39;asinh&#39;, &#39;atan&#39;, &#39;atan2&#39;, &#39;atanh&#39;, &#39;ceil&#39;, &#39;copysign&#39;, &#39;cos&#39;, &#39;cosh&#39;, &#39;degrees&#39;, &#39;e&#39;, &#39;erf&#39;, &#39;erfc&#39;, &#39;exp&#39;, &#39;expm1&#39;, &#39;fabs&#39;, &#39;factorial&#39;, &#39;floor&#39;, &#39;fmod&#39;, &#39;frexp&#39;, &#39;fsum&#39;, &#39;gamma&#39;, &#39;gcd&#39;, &#39;hypot&#39;, &#39;inf&#39;, &#39;isclose&#39;, &#39;isfinite&#39;, &#39;isinf&#39;, &#39;isnan&#39;, &#39;ldexp&#39;, &#39;lgamma&#39;, &#39;log&#39;, &#39;log10&#39;, &#39;log1p&#39;, &#39;log2&#39;, &#39;modf&#39;, &#39;nan&#39;, &#39;pi&#39;, &#39;pow&#39;, &#39;radians&#39;, &#39;sin&#39;, &#39;sinh&#39;, &#39;sqrt&#39;, &#39;tan&#39;, &#39;tanh&#39;, &#39;tau&#39;, &#39;trunc&#39;]</code></pre>\n      </div>\n<p>Next thing to do is <code class="language-text">import cmath</code> and again show the contents of <code class="language-text">cmath</code> with <code class="language-text">dir</code>:</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">import cmath\ndir(cmath)</code></pre>\n      </div>\n<p>This time the following content is reported:</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">[&#39;__doc__&#39;, &#39;__file__&#39;, &#39;__loader__&#39;, &#39;__name__&#39;, &#39;__package__&#39;, &#39;__spec__&#39;, &#39;acos&#39;, &#39;acosh&#39;, &#39;asin&#39;, &#39;asinh&#39;, &#39;atan&#39;, &#39;atanh&#39;, &#39;cos&#39;, &#39;cosh&#39;, &#39;e&#39;, &#39;exp&#39;, &#39;inf&#39;, &#39;infj&#39;, &#39;isclose&#39;, &#39;isfinite&#39;, &#39;isinf&#39;, &#39;isnan&#39;, &#39;log&#39;, &#39;log10&#39;, &#39;nan&#39;, &#39;nanj&#39;, &#39;phase&#39;, &#39;pi&#39;, &#39;polar&#39;, &#39;rect&#39;, &#39;sin&#39;, &#39;sinh&#39;, &#39;sqrt&#39;, &#39;tan&#39;, &#39;tanh&#39;, &#39;tau&#39;]</code></pre>\n      </div>\n<p>The <code class="language-text">math</code> and <code class="language-text">cmath</code> modules refer to math operations, <code class="language-text">math</code> refers to operations with real numbers and <code class="language-text">cmath</code> to operations with complex numbers. As we can see there are a lot of "shared" operations in both modules, this can lead to strange behavior if we apply bad practices at importing.</p>\n<p>In Python there are three ways of importing a module:</p>\n<ul>\n<li><code class="language-text">import module</code></li>\n<li><code class="language-text">from module import attribute</code></li>\n<li><code class="language-text">form module import *</code></li>\n</ul>\n<p>With the first you import the name of the module, to access a function from it you will need to access it by <code class="language-text">module.attribute</code> notation, but this is not the case to second and third imports, with the second you are importing directly the name of the attribute to your namespace and with the third you are importing all attributes to your namespace.</p>\n<p>So if you happen to import two equal names from two different modules, like the ones from <code class="language-text">math</code> and <code class="language-text">cmath</code> modules, you are going to be left with one name of the last one you imported, for example if we <code class="language-text">import acos from math</code> and then we <code class="language-text">import acos from cmath</code> we are going to have the attribute of <code class="language-text">cmath</code>, because we are having the same name, Python has to overwrite the pointing from <code class="language-text">math</code> to <code class="language-text">cmath</code>, this is the same thing as having a variable and assign it values multiple times with multiple objects.</p>\n<p>With this the content of namespaces is almost covered, but there one last catch to know.</p>\n<h2 id="scopes"><a href="#scopes" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Scopes</h2>\n<p>A scope is a region in which Python can directly access a name, it means that the notation <code class="language-text">module.attribute</code> is not needed to reach a name. Namespaces are bound to scopes, when resolving a name Python has to look from inwards to outwards passing from local, to the next enclosing area like function nesting, to global and at last to built-in. This exact behavior is also seen when using variables around the program.</p>\n<h2 id="conclusion"><a href="#conclusion" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Conclusion</h2>\n<p>With this we reach the end of this article, so now you should understand namespace ruling in Python, with this you do not only get a grasp of how a name of a variable works in Python, but also you understand how to organize names in code in order to avoid ambiguos functions.</p>',frontmatter:{date:"07 June, 2018",path:"/namespaces-in-python-3/",title:"Understanding namespaces in Python 3",category:"python",foreword:"Being Python an interpreted language forces it to incorporate several mechanisms to ensure consistent naming."}}},pathContext:{id:"/home/ulises/Sites/ulises-site/src/pages/posts/python/namespace-explication/namespace-explication.md absPath of file >>> MarkdownRemark"}}}});
//# sourceMappingURL=path---journal-python-namespaces-in-python-3-fdfd193ad82849d53b51.js.map